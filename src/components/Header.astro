---
import { NAVITEMS } from '../lib/data'

interface Props {
    locale: string
}

const { locale } = Astro.props

const items = locale === 'es' ? NAVITEMS.es : NAVITEMS.en

---

<header class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2">
    
    <nav class="flex px-3 text-sm font-medium rounded-full text-gray-200 justify-center items-center bg-gray-800/90">
        {
            items.map((link) => (
              <a
                class="relative block px-2 py-2 transition hover:text-blue-500"
                aria-label={link.label}
                href={link.url} >
                {link.title}
              </a>
            ))
          }
        
    </nav>
</header>

<script>
  // Ensure the script runs after the DOM content is fully loaded
  document.addEventListener('DOMContentLoaded', function () {
    console.log("HAY DOM")
    const navItems = document.querySelectorAll('nav a');
    const sections = Array.from(navItems).map((item: any) => {
      const id = item.getAttribute('aria-label');
      return document.getElementById(id);
    });

    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.15
    };

    const observerCallback = (entries: any[]) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          navItems.forEach((navItem) => {
            console.log(entry.target.id)
            if (navItem.getAttribute('aria-label') === entry.target.id) {
              navItem.classList.add('hovered');
            } else {
              navItem.classList.remove('hovered');
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);

    sections.forEach(section => {
      if (section) observer.observe(section);
    });
  });
</script>
  
<style>
  nav { 
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  .hovered {
    color: #3b82f6; 
  }
</style>